[
  {
    "published": true,
    "title": "appLab Whitelist Proxy",
    "description": "A proxy server to bypass the sandbox restrictions of code.org's AppLab using image manipulation and Node.js",
    "date": "2023-05-30T00:00:00.000Z",
    "url": "https://github.com/benny-nottonson/applabWhitelistProxy",
    "repository": "benny-nottonson/applabWhitelistProxy",
    "body": {
      "raw": "\n`applabWhitelistProxy` is a Node.js-based proxy server designed to bypass the sandbox restrictions imposed by code.org's AppLab platform. This program allows users to execute code that would normally be blocked by the AppLab sandbox, enabling them to access additional functionalities and extend the capabilities of their projects.\n\nThe main concept behind `applabWhitelistProxy` involves intercepting requests made by the AppLab platform and modifying the responses to bypass the sandbox limitations. The proxy server leverages image manipulation techniques to embed executable code within innocuous-looking images. By manipulating the pixel data of these images, the server can inject additional code that will be executed by the browser running the AppLab environment.\n\nTo use `applabWhitelistProxy`, you need to run the Node.js server on a machine accessible from the AppLab environment. Once the server is up and running, you configure the AppLab platform to send its requests through the proxy. When the AppLab platform sends a request for an image, the proxy intercepts it, modifies the response by embedding the necessary additional code, and returns the modified image to the browser.\n\nBy breaking the sandbox restrictions of AppLab, `applabWhitelistProxy` opens up possibilities for executing code that would otherwise be prohibited. This allows users to experiment with advanced functionalities, interact with external APIs, or implement custom features not provided by the original platform.\n\nThe `applabWhitelistProxy` project is hosted on GitHub in the [benny-nottonson/applabWhitelistProxy](https://github.com/benny-nottonson/applabWhitelistProxy) repository. The repository contains the source code and detailed documentation to guide users in setting up and configuring the proxy server. The code is written in Node.js, and it utilizes image manipulation techniques to bypass the AppLab sandbox restrictions.\n\nPlease note that while `applabWhitelistProxy` provides a way to bypass the sandbox limitations, it is essential to use this tool responsibly and ethically. It is crucial to respect the terms and conditions of the platform you are using and not engage in any malicious activities.\n\nBy using `applabWhitelistProxy`, developers and educators can explore new possibilities within the AppLab environment, enhance their projects with advanced functionalities, and push the boundaries of what can be achieved using code.org's AppLab platform.",
      "code": "var Component=(()=>{var c=Object.create;var s=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},r=(t,e,n,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of b(e))!m.call(t,o)&&o!==n&&s(t,o,{get:()=>e[o],enumerable:!(a=l(e,o))||a.enumerable});return t};var g=(t,e,n)=>(n=t!=null?c(u(t)):{},r(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),f=t=>r(s({},\"__esModule\",{value:!0}),t);var d=y((P,p)=>{p.exports=_jsx_runtime});var A={};x(A,{default:()=>j,frontmatter:()=>v});var i=g(d()),v={title:\"appLab Whitelist Proxy\",description:\"A proxy server to bypass the sandbox restrictions of code.org's AppLab using image manipulation and Node.js\",date:\"2023-05-30\",url:\"https://github.com/benny-nottonson/applabWhitelistProxy\",repository:\"benny-nottonson/applabWhitelistProxy\",published:!0};function h(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"applabWhitelistProxy\"}),\" is a Node.js-based proxy server designed to bypass the sandbox restrictions imposed by code.org's AppLab platform. This program allows users to execute code that would normally be blocked by the AppLab sandbox, enabling them to access additional functionalities and extend the capabilities of their projects.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The main concept behind \",(0,i.jsx)(e.code,{children:\"applabWhitelistProxy\"}),\" involves intercepting requests made by the AppLab platform and modifying the responses to bypass the sandbox limitations. The proxy server leverages image manipulation techniques to embed executable code within innocuous-looking images. By manipulating the pixel data of these images, the server can inject additional code that will be executed by the browser running the AppLab environment.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"To use \",(0,i.jsx)(e.code,{children:\"applabWhitelistProxy\"}),\", you need to run the Node.js server on a machine accessible from the AppLab environment. Once the server is up and running, you configure the AppLab platform to send its requests through the proxy. When the AppLab platform sends a request for an image, the proxy intercepts it, modifies the response by embedding the necessary additional code, and returns the modified image to the browser.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"By breaking the sandbox restrictions of AppLab, \",(0,i.jsx)(e.code,{children:\"applabWhitelistProxy\"}),\" opens up possibilities for executing code that would otherwise be prohibited. This allows users to experiment with advanced functionalities, interact with external APIs, or implement custom features not provided by the original platform.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"applabWhitelistProxy\"}),\" project is hosted on GitHub in the \",(0,i.jsx)(e.a,{href:\"https://github.com/benny-nottonson/applabWhitelistProxy\",children:\"benny-nottonson/applabWhitelistProxy\"}),\" repository. The repository contains the source code and detailed documentation to guide users in setting up and configuring the proxy server. The code is written in Node.js, and it utilizes image manipulation techniques to bypass the AppLab sandbox restrictions.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Please note that while \",(0,i.jsx)(e.code,{children:\"applabWhitelistProxy\"}),\" provides a way to bypass the sandbox limitations, it is essential to use this tool responsibly and ethically. It is crucial to respect the terms and conditions of the platform you are using and not engage in any malicious activities.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"By using \",(0,i.jsx)(e.code,{children:\"applabWhitelistProxy\"}),\", developers and educators can explore new possibilities within the AppLab environment, enhance their projects with advanced functionalities, and push the boundaries of what can be achieved using code.org's AppLab platform.\"]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(h,t)})):h(t)}var j=w;return f(A);})();\n;return Component;"
    },
    "_id": "projects/appLabWhitelistProxy.mdx",
    "_raw": {
      "sourceFilePath": "projects/appLabWhitelistProxy.mdx",
      "sourceFileName": "appLabWhitelistProxy.mdx",
      "sourceFileDir": "projects",
      "contentType": "mdx",
      "flattenedPath": "projects/appLabWhitelistProxy"
    },
    "type": "Project",
    "path": "/projects/appLabWhitelistProxy",
    "slug": "appLabWhitelistProxy"
  },
  {
    "published": true,
    "title": "Spotify Sort",
    "description": "A Python app that uses Color Coherence Vectors in order to sort Spotify Playlists",
    "date": "2023-02-08T00:00:00.000Z",
    "url": "https://github.com/benny-nottonson/spotifySort",
    "repository": "benny-nottonson/spotifySort",
    "body": {
      "raw": "\n`Spotify Sort` is a Python utility designed to sort Spotify playlists based on the colors of their album covers. The project leverages the concept of Color Coherence Vectors (CCV) to accurately analyze and compare the dominant colors in album artwork. By sorting playlists based on color similarity, users can create visually cohesive and aesthetically pleasing arrangements.\n\nTo use `Spotify Sort`, you need a Spotify account and Python version 3.9 or higher. The utility provides a user-friendly command-line interface, allowing you to easily authenticate with your Spotify account and specify the playlist you want to sort. The program then retrieves the album covers for each track in the playlist and extracts the dominant colors using Color Coherence Vectors.\n\nThe algorithm used in `Spotify Sort` applies a loop sorting approach over multiple iterations to find the shortest overall distance between all color vectors. This process ensures that visually similar album covers are grouped together, creating a smooth transition of colors throughout the sorted playlist. The chosen approach of using Color Coherence Vectors has demonstrated higher accuracy compared to a previously attempted method utilizing a Self-Organization Map.\n\nThe `Spotify Sort` project is publicly available on GitHub in the [benny-nottonson/spotifySort](https://github.com/benny-nottonson/spotifySort) repository. The repository contains the source code and documentation to guide users in setting up and running the utility. The code is written in Python and utilizes various libraries and APIs to interact with the Spotify platform and perform color analysis on the album covers.\n\nBy using `Spotify Sort`, users can enhance the visual experience of their Spotify playlists, creating visually cohesive arrangements that reflect the mood or theme of the music. Whether you want to organize playlists for personal enjoyment or create visually captivating playlists for social sharing, `Spotify Sort` provides a powerful and intuitive solution.",
      "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},a=(t,e,n,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(t,r)&&r!==n&&i(t,r,{get:()=>e[r],enumerable:!(s=d(e,r))||s.enumerable});return t};var S=(t,e,n)=>(n=t!=null?p(y(t)):{},a(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),v=t=>a(i({},\"__esModule\",{value:!0}),t);var l=m((T,c)=>{c.exports=_jsx_runtime});var j={};g(j,{default:()=>x,frontmatter:()=>b});var o=S(l()),b={title:\"Spotify Sort\",description:\"A Python app that uses Color Coherence Vectors in order to sort Spotify Playlists\",date:\"2023-02-08\",url:\"https://github.com/benny-nottonson/spotifySort\",repository:\"benny-nottonson/spotifySort\",published:!0};function h(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\" is a Python utility designed to sort Spotify playlists based on the colors of their album covers. The project leverages the concept of Color Coherence Vectors (CCV) to accurately analyze and compare the dominant colors in album artwork. By sorting playlists based on color similarity, users can create visually cohesive and aesthetically pleasing arrangements.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"To use \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\", you need a Spotify account and Python version 3.9 or higher. The utility provides a user-friendly command-line interface, allowing you to easily authenticate with your Spotify account and specify the playlist you want to sort. The program then retrieves the album covers for each track in the playlist and extracts the dominant colors using Color Coherence Vectors.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The algorithm used in \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\" applies a loop sorting approach over multiple iterations to find the shortest overall distance between all color vectors. This process ensures that visually similar album covers are grouped together, creating a smooth transition of colors throughout the sorted playlist. The chosen approach of using Color Coherence Vectors has demonstrated higher accuracy compared to a previously attempted method utilizing a Self-Organization Map.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\" project is publicly available on GitHub in the \",(0,o.jsx)(e.a,{href:\"https://github.com/benny-nottonson/spotifySort\",children:\"benny-nottonson/spotifySort\"}),\" repository. The repository contains the source code and documentation to guide users in setting up and running the utility. The code is written in Python and utilizes various libraries and APIs to interact with the Spotify platform and perform color analysis on the album covers.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"By using \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\", users can enhance the visual experience of their Spotify playlists, creating visually cohesive arrangements that reflect the mood or theme of the music. Whether you want to organize playlists for personal enjoyment or create visually captivating playlists for social sharing, \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\" provides a powerful and intuitive solution.\"]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(h,t)})):h(t)}var x=C;return v(j);})();\n;return Component;"
    },
    "_id": "projects/spotifySort.mdx",
    "_raw": {
      "sourceFilePath": "projects/spotifySort.mdx",
      "sourceFileName": "spotifySort.mdx",
      "sourceFileDir": "projects",
      "contentType": "mdx",
      "flattenedPath": "projects/spotifySort"
    },
    "type": "Project",
    "path": "/projects/spotifySort",
    "slug": "spotifySort"
  },
  {
    "published": true,
    "title": "tensorflowImageMorpher",
    "description": "A tensorflow project to morph from image to image using morph maps",
    "date": "2022-06-01T00:00:00.000Z",
    "url": "https://github.com/benny-nottonson/tensorflowImageMorpher",
    "repository": "benny-nottonson/tensorflowImageMorpher",
    "body": {
      "raw": "\n`tensorflowImageMorpher` is a program written in Python 3.11 that utilizes the power of Tensorflow to generate smooth transitions between a set of input images. The project aims to create visually appealing morph animations by analyzing the edges and colors of the input images.\n\nThe main concept behind `tensorflowImageMorpher` involves training a deep learning model on a collection of source images. This model learns to recognize and capture the distinctive features of each image, such as color gradients, textures, and object edges. With this learned knowledge, the program generates a warp map, which acts as a visual guide for transitioning from one image to another.\n\nTo use `tensorflowImageMorpher`, the user provides a set of source images that represent the start and end points of the morph animation. The program then calculates a series of intermediate images by smoothly transforming the source images based on the generated warp map. The number of steps in the morphing process can be customized to control the level of detail and the speed of the transition.\n\nThe resulting morph animation can be saved as a video or a sequence of images, allowing users to create captivating visual effects or dynamic storytelling elements. The project provides a user-friendly command-line interface that simplifies the process of morphing images and offers flexibility in adjusting various parameters, such as the duration of the animation, the morphing style, and the output format.\n\nThis project is hosted on GitHub, and the source code is available in the [benny-nottonson/tensorflowImageMorpher](https://github.com/benny-nottonson/tensorflowImageMorpher) repository. The codebase is written in Python, leveraging the capabilities of Tensorflow, a popular deep learning framework. The repository includes comprehensive documentation and examples to guide users in getting started with `tensorflowImageMorpher` and exploring its functionalities.\n\nWith `tensorflowImageMorpher`, users can easily create stunning morph animations, whether for artistic purposes, visual storytelling, or special effects in various multimedia applications. It provides a powerful toolset to generate smooth transitions between images, unlocking the potential for captivating and visually appealing visual content.",
      "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var n in e)r(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of d(e))!u.call(t,i)&&i!==n&&r(t,i,{get:()=>e[i],enumerable:!(a=m(e,i))||a.enumerable});return t};var b=(t,e,n)=>(n=t!=null?p(g(t)):{},s(e||!t||!t.__esModule?r(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=>s(r({},\"__esModule\",{value:!0}),t);var l=f((I,h)=>{h.exports=_jsx_runtime});var M={};w(M,{default:()=>x,frontmatter:()=>v});var o=b(l()),v={title:\"tensorflowImageMorpher\",description:\"A tensorflow project to morph from image to image using morph maps\",date:\"2022-06-01\",url:\"https://github.com/benny-nottonson/tensorflowImageMorpher\",repository:\"benny-nottonson/tensorflowImageMorpher\",published:!0};function c(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"tensorflowImageMorpher\"}),\" is a program written in Python 3.11 that utilizes the power of Tensorflow to generate smooth transitions between a set of input images. The project aims to create visually appealing morph animations by analyzing the edges and colors of the input images.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The main concept behind \",(0,o.jsx)(e.code,{children:\"tensorflowImageMorpher\"}),\" involves training a deep learning model on a collection of source images. This model learns to recognize and capture the distinctive features of each image, such as color gradients, textures, and object edges. With this learned knowledge, the program generates a warp map, which acts as a visual guide for transitioning from one image to another.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"To use \",(0,o.jsx)(e.code,{children:\"tensorflowImageMorpher\"}),\", the user provides a set of source images that represent the start and end points of the morph animation. The program then calculates a series of intermediate images by smoothly transforming the source images based on the generated warp map. The number of steps in the morphing process can be customized to control the level of detail and the speed of the transition.\"]}),`\n`,(0,o.jsx)(e.p,{children:\"The resulting morph animation can be saved as a video or a sequence of images, allowing users to create captivating visual effects or dynamic storytelling elements. The project provides a user-friendly command-line interface that simplifies the process of morphing images and offers flexibility in adjusting various parameters, such as the duration of the animation, the morphing style, and the output format.\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"This project is hosted on GitHub, and the source code is available in the \",(0,o.jsx)(e.a,{href:\"https://github.com/benny-nottonson/tensorflowImageMorpher\",children:\"benny-nottonson/tensorflowImageMorpher\"}),\" repository. The codebase is written in Python, leveraging the capabilities of Tensorflow, a popular deep learning framework. The repository includes comprehensive documentation and examples to guide users in getting started with \",(0,o.jsx)(e.code,{children:\"tensorflowImageMorpher\"}),\" and exploring its functionalities.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"With \",(0,o.jsx)(e.code,{children:\"tensorflowImageMorpher\"}),\", users can easily create stunning morph animations, whether for artistic purposes, visual storytelling, or special effects in various multimedia applications. It provides a powerful toolset to generate smooth transitions between images, unlocking the potential for captivating and visually appealing visual content.\"]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(c,t)})):c(t)}var x=j;return y(M);})();\n;return Component;"
    },
    "_id": "projects/tensorflowImageMorpher.mdx",
    "_raw": {
      "sourceFilePath": "projects/tensorflowImageMorpher.mdx",
      "sourceFileName": "tensorflowImageMorpher.mdx",
      "sourceFileDir": "projects",
      "contentType": "mdx",
      "flattenedPath": "projects/tensorflowImageMorpher"
    },
    "type": "Project",
    "path": "/projects/tensorflowImageMorpher",
    "slug": "tensorflowImageMorpher"
  },
  {
    "published": true,
    "title": "bennynottonson.com",
    "description": "A Next.js-based portfolio site showcasing the work and projects of Benny Nottonson",
    "date": "2023-06-01T00:00:00.000Z",
    "url": "https://bennnyottonson.com",
    "repository": "benny-nottonson/benny-nottonson.github.io",
    "body": {
      "raw": "\n[bennynottonson.com](https://bennnyottonson.com) is a personal portfolio site created using Next.js, a popular React framework for building static and server-side-rendered web applications. This website serves as a showcase for the work, projects, and achievements of Benny Nottonson.\n\nThe primary purpose of bennynottonson.com is to provide an interactive and visually appealing platform that presents Benny Nottonson's portfolio in a professional and engaging manner. The site incorporates modern design principles and user experience techniques to ensure a seamless browsing experience for visitors.\n\nThe portfolio site showcases a diverse range of projects, including web development, software engineering, data science, and other relevant works. Each project is accompanied by a detailed description, highlighting the key features, technologies used, and the problem it aims to solve. Additionally, the site includes interactive elements, such as live demos, screenshots, and links to the source code repositories, enabling visitors to explore the projects further.\n\nThe site's development is based on Next.js, which offers numerous advantages for building performant and scalable web applications. Next.js provides server-side rendering capabilities, enabling fast initial page loads and improved search engine optimization. The framework also supports code splitting and automatic routing, making it easier to manage and navigate through different sections of the portfolio.\n\nThe source code for bennynottonson.com is hosted on GitHub in the [benny-nottonson/benny-nottonson.github.io](https://github.com/benny-nottonson/benny-nottonson.github.io) repository. The repository contains the codebase, including React components, styling, and any additional assets required for the site. The project is open-source, allowing others to explore and learn from the implementation or contribute to its improvement.",
      "code": "var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var t in e)i(n,t,{get:e[t],enumerable:!0})},a=(n,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!g.call(n,s)&&s!==t&&i(n,s,{get:()=>e[s],enumerable:!(r=h(e,s))||r.enumerable});return n};var y=(n,e,t)=>(t=n!=null?l(u(n)):{},a(e||!n||!n.__esModule?i(t,\"default\",{value:n,enumerable:!0}):t,n)),v=n=>a(i({},\"__esModule\",{value:!0}),n);var p=b((N,c)=>{c.exports=_jsx_runtime});var T={};f(T,{default:()=>x,frontmatter:()=>j});var o=y(p()),j={title:\"bennynottonson.com\",description:\"A Next.js-based portfolio site showcasing the work and projects of Benny Nottonson\",date:\"2023-06-01\",url:\"https://bennnyottonson.com\",repository:\"benny-nottonson/benny-nottonson.github.io\",published:!0};function d(n){let e=Object.assign({p:\"p\",a:\"a\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.a,{href:\"https://bennnyottonson.com\",children:\"bennynottonson.com\"}),\" is a personal portfolio site created using Next.js, a popular React framework for building static and server-side-rendered web applications. This website serves as a showcase for the work, projects, and achievements of Benny Nottonson.\"]}),`\n`,(0,o.jsx)(e.p,{children:\"The primary purpose of bennynottonson.com is to provide an interactive and visually appealing platform that presents Benny Nottonson's portfolio in a professional and engaging manner. The site incorporates modern design principles and user experience techniques to ensure a seamless browsing experience for visitors.\"}),`\n`,(0,o.jsx)(e.p,{children:\"The portfolio site showcases a diverse range of projects, including web development, software engineering, data science, and other relevant works. Each project is accompanied by a detailed description, highlighting the key features, technologies used, and the problem it aims to solve. Additionally, the site includes interactive elements, such as live demos, screenshots, and links to the source code repositories, enabling visitors to explore the projects further.\"}),`\n`,(0,o.jsx)(e.p,{children:\"The site's development is based on Next.js, which offers numerous advantages for building performant and scalable web applications. Next.js provides server-side rendering capabilities, enabling fast initial page loads and improved search engine optimization. The framework also supports code splitting and automatic routing, making it easier to manage and navigate through different sections of the portfolio.\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"The source code for bennynottonson.com is hosted on GitHub in the \",(0,o.jsx)(e.a,{href:\"https://github.com/benny-nottonson/benny-nottonson.github.io\",children:\"benny-nottonson/benny-nottonson.github.io\"}),\" repository. The repository contains the codebase, including React components, styling, and any additional assets required for the site. The project is open-source, allowing others to explore and learn from the implementation or contribute to its improvement.\"]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(d,n)})):d(n)}var x=w;return v(T);})();\n;return Component;"
    },
    "_id": "projects/website.mdx",
    "_raw": {
      "sourceFilePath": "projects/website.mdx",
      "sourceFileName": "website.mdx",
      "sourceFileDir": "projects",
      "contentType": "mdx",
      "flattenedPath": "projects/website"
    },
    "type": "Project",
    "path": "/projects/website",
    "slug": "website"
  }
]