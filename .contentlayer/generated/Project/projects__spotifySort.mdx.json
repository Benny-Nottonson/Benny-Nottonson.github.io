{
  "published": true,
  "title": "Spotify Sort",
  "description": "A Python app that uses Color Coherence Vectors in order to sort Spotify Playlists",
  "date": "2023-02-08T00:00:00.000Z",
  "url": "https://github.com/benny-nottonson/spotifySort",
  "repository": "benny-nottonson/spotifySort",
  "body": {
    "raw": "\n`Spotify Sort` is a Python utility intended to sort Spotify playlists by the color of their album covers. Using Color Coherency Vectors proved to be the most accurate, after applying loop sorting over multiple iterations to find the shortest overall distance between all vectors. A Self-Organization Map was originally used, but it was not efficient or accurate.\n\nSpotify Sort is publically avaialable and should work on Python 3.9+\n",
    "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(t,o)=>()=>(o||t((o={exports:{}}).exports,o),o.exports),m=(t,o)=>{for(var n in o)s(t,n,{get:o[n],enumerable:!0})},a=(t,o,n,i)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let r of u(o))!f.call(t,r)&&r!==n&&s(t,r,{get:()=>o[r],enumerable:!(i=y(o,r))||i.enumerable});return t};var S=(t,o,n)=>(n=t!=null?d(h(t)):{},a(o||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),g=t=>a(s({},\"__esModule\",{value:!0}),t);var l=b((w,c)=>{c.exports=_jsx_runtime});var v={};m(v,{default:()=>_,frontmatter:()=>x});var e=S(l()),x={title:\"Spotify Sort\",description:\"A Python app that uses Color Coherence Vectors in order to sort Spotify Playlists\",date:\"2023-02-08\",url:\"https://github.com/benny-nottonson/spotifySort\",repository:\"benny-nottonson/spotifySort\",published:!0};function p(t){let o=Object.assign({p:\"p\",code:\"code\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(o.p,{children:[(0,e.jsx)(o.code,{children:\"Spotify Sort\"}),\" is a Python utility intended to sort Spotify playlists by the color of their album covers. Using Color Coherency Vectors proved to be the most accurate, after applying loop sorting over multiple iterations to find the shortest overall distance between all vectors. A Self-Organization Map was originally used, but it was not efficient or accurate.\"]}),`\n`,(0,e.jsx)(o.p,{children:\"Spotify Sort is publically avaialable and should work on Python 3.9+\"})]})}function j(t={}){let{wrapper:o}=t.components||{};return o?(0,e.jsx)(o,Object.assign({},t,{children:(0,e.jsx)(p,t)})):p(t)}var _=j;return g(v);})();\n;return Component;"
  },
  "_id": "projects/spotifySort.mdx",
  "_raw": {
    "sourceFilePath": "projects/spotifySort.mdx",
    "sourceFileName": "spotifySort.mdx",
    "sourceFileDir": "projects",
    "contentType": "mdx",
    "flattenedPath": "projects/spotifySort"
  },
  "type": "Project",
  "path": "/projects/spotifySort",
  "slug": "spotifySort"
}