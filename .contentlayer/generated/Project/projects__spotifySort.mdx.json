{
  "published": true,
  "title": "Spotify Sort",
  "description": "A Python app that uses Color Coherence Vectors in order to sort Spotify Playlists",
  "date": "2023-02-08T00:00:00.000Z",
  "url": "https://github.com/benny-nottonson/spotifySort",
  "repository": "benny-nottonson/spotifySort",
  "body": {
    "raw": "\n`Spotify Sort` is a Python utility designed to sort Spotify playlists based on the colors of their album covers. The project leverages the concept of Color Coherence Vectors (CCV) to accurately analyze and compare the dominant colors in album artwork. By sorting playlists based on color similarity, users can create visually cohesive and aesthetically pleasing arrangements.\n\nTo use `Spotify Sort`, you need a Spotify account and Python version 3.9 or higher. The utility provides a user-friendly command-line interface, allowing you to easily authenticate with your Spotify account and specify the playlist you want to sort. The program then retrieves the album covers for each track in the playlist and extracts the dominant colors using Color Coherence Vectors.\n\nThe algorithm used in `Spotify Sort` applies a loop sorting approach over multiple iterations to find the shortest overall distance between all color vectors. This process ensures that visually similar album covers are grouped together, creating a smooth transition of colors throughout the sorted playlist. The chosen approach of using Color Coherence Vectors has demonstrated higher accuracy compared to a previously attempted method utilizing a Self-Organization Map.\n\nThe `Spotify Sort` project is publicly available on GitHub in the [benny-nottonson/spotifySort](https://github.com/benny-nottonson/spotifySort) repository. The repository contains the source code and documentation to guide users in setting up and running the utility. The code is written in Python and utilizes various libraries and APIs to interact with the Spotify platform and perform color analysis on the album covers.\n\nBy using `Spotify Sort`, users can enhance the visual experience of their Spotify playlists, creating visually cohesive arrangements that reflect the mood or theme of the music. Whether you want to organize playlists for personal enjoyment or create visually captivating playlists for social sharing, `Spotify Sort` provides a powerful and intuitive solution.",
    "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},a=(t,e,n,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(t,r)&&r!==n&&i(t,r,{get:()=>e[r],enumerable:!(s=d(e,r))||s.enumerable});return t};var S=(t,e,n)=>(n=t!=null?p(y(t)):{},a(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),v=t=>a(i({},\"__esModule\",{value:!0}),t);var l=m((T,c)=>{c.exports=_jsx_runtime});var j={};g(j,{default:()=>x,frontmatter:()=>b});var o=S(l()),b={title:\"Spotify Sort\",description:\"A Python app that uses Color Coherence Vectors in order to sort Spotify Playlists\",date:\"2023-02-08\",url:\"https://github.com/benny-nottonson/spotifySort\",repository:\"benny-nottonson/spotifySort\",published:!0};function h(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\" is a Python utility designed to sort Spotify playlists based on the colors of their album covers. The project leverages the concept of Color Coherence Vectors (CCV) to accurately analyze and compare the dominant colors in album artwork. By sorting playlists based on color similarity, users can create visually cohesive and aesthetically pleasing arrangements.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"To use \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\", you need a Spotify account and Python version 3.9 or higher. The utility provides a user-friendly command-line interface, allowing you to easily authenticate with your Spotify account and specify the playlist you want to sort. The program then retrieves the album covers for each track in the playlist and extracts the dominant colors using Color Coherence Vectors.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The algorithm used in \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\" applies a loop sorting approach over multiple iterations to find the shortest overall distance between all color vectors. This process ensures that visually similar album covers are grouped together, creating a smooth transition of colors throughout the sorted playlist. The chosen approach of using Color Coherence Vectors has demonstrated higher accuracy compared to a previously attempted method utilizing a Self-Organization Map.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\" project is publicly available on GitHub in the \",(0,o.jsx)(e.a,{href:\"https://github.com/benny-nottonson/spotifySort\",children:\"benny-nottonson/spotifySort\"}),\" repository. The repository contains the source code and documentation to guide users in setting up and running the utility. The code is written in Python and utilizes various libraries and APIs to interact with the Spotify platform and perform color analysis on the album covers.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"By using \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\", users can enhance the visual experience of their Spotify playlists, creating visually cohesive arrangements that reflect the mood or theme of the music. Whether you want to organize playlists for personal enjoyment or create visually captivating playlists for social sharing, \",(0,o.jsx)(e.code,{children:\"Spotify Sort\"}),\" provides a powerful and intuitive solution.\"]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(h,t)})):h(t)}var x=C;return v(j);})();\n;return Component;"
  },
  "_id": "projects/spotifySort.mdx",
  "_raw": {
    "sourceFilePath": "projects/spotifySort.mdx",
    "sourceFileName": "spotifySort.mdx",
    "sourceFileDir": "projects",
    "contentType": "mdx",
    "flattenedPath": "projects/spotifySort"
  },
  "type": "Project",
  "path": "/projects/spotifySort",
  "slug": "spotifySort"
}